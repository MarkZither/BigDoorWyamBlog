#n -p Wyam.Markdown
#n -p Wyam.Yaml
#n Wyam.SearchIndex

#theme CleanBlog
#recipe Blog

// Customize your settings and add new ones here
Settings[Keys.Host] = "bigdoor24.pl";
Settings[BlogKeys.Title] = "BigDoor24 Blog";
Settings[BlogKeys.Description] = "Welcome!";
//Settings[Keys.LinkRoot] = "/blog";
Settings[Keys.LinkHideExtensions] = false;
Settings[BlogKeys.ArchiveExcerpts] = true;
// Add any pipeline customizations here

//Pipelines[Blog.Tags].InsertAfter("Populate",
  //  new Meta(Keys.RelativeFilePath, (doc, ctx) => GetValidFilePath(doc.FilePath(Keys.RelativeFilePath))));

public FilePath GetValidFilePath(FilePath filePath)
{
    string dir = filePath.Directory.ToString();
    filePath = new FilePath(filePath.FullPath.ToLower().Replace("ą","a").Replace("ć","c").Replace("ę","e").Replace("ł","l").Replace("ń","n").Replace("ó","o").Replace("ś","s").Replace("ź","z").Replace("ż","z"));// "test" + filePath.FileName;
     // Do whatever you need to the FilePath object here
     return filePath;
}

public class PostMetaData
{
    public string Tag { get; set; }
    public string Url {get; set;}
    public int Weight { get; set; }
}

public class GetJsonDocument : IModule
{
    public IEnumerable<IDocument> Execute(IReadOnlyList<IDocument> inputs, IExecutionContext context)
    {
        var result = new List<PostMetaData>();
        
        foreach(IDocument tagDocument in inputs
                .GroupBy(x => x.String(BlogKeys.Tag)).Select(x => x.Where(p => p.Get<int>(Keys.CurrentPage) == 1).First())
                .OrderByDescending(x => x.Get<int>(Keys.TotalItems)))
            {
                string tag = tagDocument.String(BlogKeys.Tag);
                int postCount = tagDocument.Get<int>(Keys.TotalItems);
                string url = context.GetLink(tagDocument);
                result.Add(new PostMetaData
                {
                  Tag = tag,
                  Weight = postCount,
                  Url = url
                });
            }

        var json = Newtonsoft.Json.JsonConvert.SerializeObject(result, Newtonsoft.Json.Formatting.Indented);

        return new[] { context.GetDocument(context.GetContentStream(json)) };
    }
}

Pipelines.Add("CreateJson",
    Documents(Blog.Tags),  // Fetch the post documents
    new GetJsonDocument(),
    WriteFiles((doc,ctx) => "tags.json")
);

//https://randalvance.net/post/implementing-searching-wyam.html
Pipelines.Add("ServicesSearch",
    ReadFiles("services/*.md"),
    FrontMatter(Yaml()),
    Markdown(),
    Meta("SearchIndexItem", new SearchIndexItem("/" + @doc.String("RelativeFilePathBase"), @doc.String("Title"), @doc.String("Tags"))
            { Description = @doc.String("Lead"), Tags = @doc.String("city") + " " + @doc.String("district") + " " + @doc.String("Service") + " " + @doc.String("Service") })
);

Pipelines.Add("SearchIndex",
	Documents("ServicesSearch"),
	SearchIndex((FilePath)"stopwords.txt"),
	WriteFiles((doc,ctx) => string.IsNullOrEmpty(doc.Content) ? null : "assets/js/searchindex.js").UseWriteMetadata(false)
);